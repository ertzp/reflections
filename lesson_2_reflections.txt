1. O que acontece ao iniciar um repositório? Por que você precisa fazer isso?
R.: Ao criar um repositório com o Git, são criados arquivos necessários para que o Git consiga "trabalhar" identificando o que precisa ser verificado nos commits. Ao criar o repositório com o git init, é criado um arquivo oculto .git (que pode ser visualizado digitando ls -a). Precisamos fazer isto iniciando o repositório para que existam as instruções básicas do GIT no arquivo .git oculto e assim iniciar o trabalho de versionamento.

Você também pode querer executar git status depois de criar o arquivo.


2. Em que se difere a área de preparação do diretório de trabalho e do repositório? Qual valor você acha que ela oferece?
R.: A área de preparação é o local onde escolhemos os arquivos que desejamos ter commits. Podemos adicionar um ou vários arquivos na área de preparação. A área de tabalho mostra todos os arquivos presentes no diretório em que se está trabalhando. Todos os arquivos da área de trabalho podem ou não estar presentes na área de preparação. O repositório é o ambiente onde os arquivos selecionados poderão receber os commits.

Aplicando git status podemos visualizar na área de preparação quais arquivos estão ou não prontos para receberem commit e se estão sendo rastreados.


3. Como você pode usar a área de preparação para garantir que tenha um commit por alteração lógica?
R.: Ao invés de fazer um únco commite para todos os arquivos alterado da área de trabalho, posso adicionar um arquivo à àrea de preparação e gerar um commit. Depois, adicionar um outro arquivo à área de preparação e criar outro commit. Se amas as alterações forem de uma correção conjunta de um mesmo problema ou alteração, poderia gerar um commit para ambos os arquivos.


4. Quais são algumas das situações em que branches seriam úteis para manter seu histórico organizado? Como branches ajudariam?
R.: Fazer uma alteração paralela como algo experimental sem interferir do projeto principal u gera uma versão paralela como uma alteração de idioma. Gerar git branch ajudaria para criar um caminho paralelo do arquivo e poder fazer experiências sem arruinar o projeto principal.


5. Como os diagramas ajudam a visualizar a estrutura de branches?
R.: Ajudar a identificar a sequencia de commits em cada branch do mais atual ao mais antigo, quantos branch existem e onde um branch foi iniciado, quantos commits executados e onde ele parou em relação ao andamento dos commits do branch master principal.


6. Qual é o resultado da mesclagem de dois branches? Por que o representamos no diagrama dessa forma?
R.: Mescla-se os commits dos dois branchs intercalado pelo hora de criação, juntando todos os commits em uma única fila no branch em que se está. Representa-se no diagrama com um commit nomeado "Merge branch2".


7. Quais são os prós e contras da mesclagem automática do Git v. sempre fazer mesclagens manualmente?
R.: Mesclagem automática do git ajuda e muito atualizar um arquivo incluindo outros commits ao branch que se deseja atualizar e de forma rápida, porém, algumas vezes o git não consegue unificar (git merge) os arquivos identificando conflito, quando, por exemplo, uma mesma linha tenha sido alterada em ambos os arquivos. Ele mostrará sempre o conflito, após o git merge branch1 branch2 identificando os locais de conflito para falicitar que o usuário identifique e corrija o conflito.

Isto com certeza é bem melhor do que sempre fazer alterações/comparações manuais pois pode levar muito tempo para identificar cada ponto alterado do arquivo.